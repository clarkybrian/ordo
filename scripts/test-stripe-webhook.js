// Script de test pour la fonction Stripe webhook
// Ce script v√©rifie que la fonction r√©pond correctement aux requ√™tes OPTIONS et POST

const WEBHOOK_URL = 'https://tidslxypgfettpguqwxn.supabase.co/functions/v1/stripe-webhook';

async function testWebhookEndpoint() {
  console.log('üß™ Test de la fonction Stripe webhook...\n');

  // Test 1: V√©rifier que les requ√™tes OPTIONS fonctionnent (CORS)
  console.log('1Ô∏è‚É£ Test CORS (OPTIONS)...');
  try {
    const optionsResponse = await fetch(WEBHOOK_URL, {
      method: 'OPTIONS',
      headers: {
        'Access-Control-Request-Method': 'POST',
        'Access-Control-Request-Headers': 'stripe-signature, content-type'
      }
    });
    
    console.log('   Status:', optionsResponse.status);
    console.log('   Headers:', Object.fromEntries(optionsResponse.headers.entries()));
    
    if (optionsResponse.status === 200) {
      console.log('   ‚úÖ CORS configur√© correctement\n');
    } else {
      console.log('   ‚ùå Probl√®me CORS\n');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur CORS:', error.message, '\n');
  }

  // Test 2: V√©rifier qu'une requ√™te POST sans signature √©choue proprement
  console.log('2Ô∏è‚É£ Test requ√™te POST sans signature...');
  try {
    const postResponse = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ test: 'data' })
    });
    
    const responseText = await postResponse.text();
    console.log('   Status:', postResponse.status);
    console.log('   Response:', responseText);
    
    if (postResponse.status === 400) {
      console.log('   ‚úÖ Fonction rejette correctement les requ√™tes sans signature\n');
    } else {
      console.log('   ‚ö†Ô∏è  R√©ponse inattendue\n');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur POST:', error.message, '\n');
  }

  // Test 3: V√©rifier que les m√©thodes non support√©es sont rejet√©es
  console.log('3Ô∏è‚É£ Test m√©thode GET (doit √™tre rejet√©e)...');
  try {
    const getResponse = await fetch(WEBHOOK_URL, {
      method: 'GET'
    });
    
    console.log('   Status:', getResponse.status);
    
    if (getResponse.status === 405) {
      console.log('   ‚úÖ M√©thodes non support√©es correctement rejet√©es\n');
    } else {
      console.log('   ‚ö†Ô∏è  R√©ponse inattendue pour GET\n');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur GET:', error.message, '\n');
  }

  console.log('üèÅ Tests termin√©s !');
}

// Ex√©cuter les tests si ce script est appel√© directement
if (typeof window === 'undefined') {
  testWebhookEndpoint();
}