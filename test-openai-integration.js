// Test du service OpenAI
import { openaiService } from './src/services/openai.js';

// Mock des emails pour tester
const testEmails = [
  {
    gmail_id: 'test1',
    subject: 'Facture EDF - Votre facture d\'√©lectricit√©',
    sender: 'EDF',
    sender_email: 'noreply@edf.fr',
    body_text: 'Bonjour, voici votre facture d\'√©lectricit√© pour le mois de septembre. Montant: 125‚Ç¨',
    snippet: 'Votre facture d\'√©lectricit√© pour septembre',
    received_at: new Date().toISOString(),
    is_important: false,
    is_read: false,
    labels: [],
    thread_id: 'thread1'
  },
  {
    gmail_id: 'test2',
    subject: 'R√©union √©quipe projet Alpha',
    sender: 'Marie Dubois',
    sender_email: 'marie.dubois@entreprise.com',
    body_text: 'Bonjour, je vous invite √† la r√©union du projet Alpha demain √† 14h en salle de conf√©rence',
    snippet: 'R√©union projet Alpha demain 14h',
    received_at: new Date().toISOString(),
    is_important: true,
    is_read: false,
    labels: [],
    thread_id: 'thread2'
  },
  {
    gmail_id: 'test3',
    subject: 'Commande Amazon exp√©di√©e',
    sender: 'Amazon',
    sender_email: 'no-reply@amazon.fr',
    body_text: 'Votre commande #123456 a √©t√© exp√©di√©e. Livraison pr√©vue demain.',
    snippet: 'Commande exp√©di√©e, livraison demain',
    received_at: new Date().toISOString(),
    is_important: false,
    is_read: false,
    labels: [],
    thread_id: 'thread3'
  }
];

// Mock des cat√©gories existantes
const existingCategories = [
  {
    id: 'cat1',
    user_id: 'user123',
    name: 'Travail',
    color: '#f59e0b',
    icon: 'üíº',
    created_at: new Date().toISOString(),
    is_auto_generated: false,
    emails_count: 5
  }
];

async function testOpenAIClassification() {
  console.log('üß™ Test de classification OpenAI...\n');

  try {
    for (const email of testEmails) {
      console.log(`üìß Test email: "${email.subject}"`);
      console.log(`   De: ${email.sender_email}`);
      console.log(`   Contenu: ${email.snippet}`);
      
      const result = await openaiService.classifyEmail(email, existingCategories);
      
      console.log(`‚úÖ R√©sultat:`);
      console.log(`   Cat√©gorie: ${result.category_name}`);
      console.log(`   Confiance: ${Math.round(result.confidence * 100)}%`);
      console.log(`   Auto-cr√©√©e: ${result.auto_created ? 'Oui' : 'Non'}`);
      console.log(`   Raisonnement: ${result.reasoning}`);
      console.log('');
      
      // Ajouter la nouvelle cat√©gorie √† la liste si elle a √©t√© cr√©√©e
      if (result.auto_created) {
        existingCategories.push({
          id: result.category_id,
          user_id: 'user123',
          name: result.category_name,
          color: '#3b82f6',
          icon: 'üìÅ',
          created_at: new Date().toISOString(),
          is_auto_generated: true,
          emails_count: 1
        });
      }
    }

    console.log(`üìä Cat√©gories finales (${existingCategories.length}):`);
    existingCategories.forEach(cat => {
      console.log(`   ${cat.icon} ${cat.name} ${cat.is_auto_generated ? '(auto)' : '(manuelle)'}`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

async function testChatbot() {
  console.log('\nü§ñ Test du chatbot...\n');

  const testQuestions = [
    "Combien de cat√©gories j'ai cr√©√©es ?",
    "Quels sont mes derniers emails ?",
    "R√©sume mes emails par cat√©gorie"
  ];

  try {
    for (const question of testQuestions) {
      console.log(`‚ùì Question: "${question}"`);
      
      const response = await openaiService.handleChatbotQuery(question, 'user123');
      
      console.log(`ü§ñ R√©ponse (${response.type}):`);
      console.log(`   ${response.message}`);
      if (response.data) {
        console.log(`   Donn√©es: ${JSON.stringify(response.data)}`);
      }
      console.log('');
    }
  } catch (error) {
    console.error('‚ùå Erreur lors du test chatbot:', error);
  }
}

// Ex√©cuter les tests
async function runTests() {
  console.log('üöÄ D√©marrage des tests OpenAI pour Ordo\n');
  
  // V√©rifier que la cl√© API est configur√©e
  if (!process.env.VITE_OPENAI_API_KEY) {
    console.error('‚ùå Cl√© API OpenAI manquante. V√©rifiez votre fichier .env');
    return;
  }
  
  console.log('‚úÖ Cl√© API OpenAI d√©tect√©e');
  console.log('=====================================\n');
  
  await testOpenAIClassification();
  await testChatbot();
  
  console.log('üéâ Tests termin√©s !');
}

// Lancer les tests si le script est ex√©cut√© directement
if (import.meta.url === new URL(import.meta.url).href) {
  runTests().catch(console.error);
}

export { runTests };
