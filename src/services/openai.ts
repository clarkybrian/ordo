import OpenAI from 'openai';
import { supabase } from '../lib/supabase';
import type { ProcessedEmail } from './gmail';
import type { Category } from './classification';
// import { chatbotLimiterService } from './chatbotLimiter';

// Interface pour le contexte email (utilis√©e dans d'autres fonctions si besoin)
// interface EmailContext {
//   id: string;
//   subject: string;
//   sender_name: string;
//   sender_email: string;
//   received_at: string;
//   body_text?: string;
//   snippet?: string;
//   is_read: boolean;
//   is_important: boolean;
//   category?: string;
//   labels?: string[];
//   attachments?: unknown[];
// }

// interface ConversationMessage {
//   content: string;
//   isUser: boolean;
// }

export interface ClassificationResult {
  category_id: string;
  category_name: string;
  confidence: number;
  auto_created: boolean;
  reasoning: string;
}

export interface ChatbotResponse {
  message: string;
  data?: unknown;
  type: 'info' | 'data' | 'error' | 'warning';
}

interface OpenAIClassificationResponse {
  category_name: string;
  use_existing: boolean;
  confidence: number;
  reasoning: string;
}

interface EmailSummary {
  subject: string;
  sender: string;
  date: string;
  isImportant: boolean;
  isRead: boolean;
  category: string;
  content: string;
  hasAttachments: boolean;
}

interface EmailWithCategory {
  id: string;
  subject: string;
  sender_email: string;
  sender_name?: string;
  snippet: string;
  body_text?: string;
  body_html?: string;
  received_at: string;
  created_at: string;
  is_read: boolean;
  is_important: boolean;
  has_attachments?: boolean;
  labels?: string[];
  category?: {
    name: string;
    color: string;
    icon: string;
  };
}

class OpenAIService {
  private openai: OpenAI | null;
  private readonly MAX_CATEGORIES = 8;
  private readonly MIN_CATEGORIES = 1;

  constructor() {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    if (!apiKey || apiKey.length < 50) {
      console.warn('‚ö†Ô∏è Cl√© API OpenAI manquante ou incorrecte - Assistant d√©sactiv√© temporairement');
      // Cr√©er un client factice pour √©viter les erreurs
      this.openai = null;
      return;
    }
    
    try {
      this.openai = new OpenAI({
        apiKey: apiKey,
        dangerouslyAllowBrowser: true // Pour utilisation c√¥t√© client
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur initialisation OpenAI:', error);
      this.openai = null;
    }
  }

  /**
   * Classifie un email en utilisant GPT-4o mini (mod√®le √©conomique et performant)
   */
  async classifyEmail(email: ProcessedEmail, existingCategories: Category[]): Promise<ClassificationResult> {
    try {
      // V√©rifier si OpenAI est disponible
      if (!this.openai) {
        console.warn('‚ö†Ô∏è OpenAI non disponible - utilisation du fallback');
        return this.getFallbackCategory(existingCategories);
      }

      console.log(`ü§ñ Classification OpenAI de l'email: "${email.subject}"`);

      const existingCategoryNames = existingCategories.map(cat => cat.name);

      const prompt = this.buildClassificationPrompt(email, existingCategoryNames);

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini', // CHANG√â : GPT-4o mini pour la classification
        messages: [
          {
            role: 'system',
            content: 'Tu es un assistant expert en classification d\'emails. Tu dois analyser un email et r√©pondre UNIQUEMENT avec le nom exact de la cat√©gorie appropri√©e parmi celles propos√©es.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 50, // R√©duit car on veut juste le nom de cat√©gorie
        temperature: 0.1, // Faible pour des r√©sultats plus d√©terministes
        // RETIR√â: response_format JSON qui causait la confusion
      });

      const response = completion.choices[0].message.content;
      if (!response) {
        throw new Error('R√©ponse vide de OpenAI');
      }

      // Le r√©sultat est maintenant directement le nom de la cat√©gorie
      const categoryName = response.trim();
      console.log('üìä Cat√©gorie choisie par OpenAI:', categoryName);

      // Trouver la cat√©gorie correspondante
      const matchedCategory = existingCategories.find(
        cat => cat.name.toLowerCase() === categoryName.toLowerCase()
      );

      if (matchedCategory) {
        return {
          category_id: matchedCategory.id,
          category_name: matchedCategory.name,
          confidence: 0.9,
          auto_created: false,
          reasoning: `Class√© comme ${matchedCategory.name} par OpenAI GPT-4o mini`
        };
      } else {
        console.warn(`‚ö†Ô∏è Cat√©gorie "${categoryName}" non trouv√©e, utilisation du fallback`);
        return this.getFallbackCategory(existingCategories);
      }

    } catch (error) {
      console.error('‚ùå Erreur lors de la classification OpenAI:', error);
      // Fallback vers une cat√©gorie par d√©faut
      return this.getFallbackCategory(existingCategories);
    }
  }

  /**
   * Enrichit le contexte email avec des m√©tadonn√©es avanc√©es pour classification pr√©cise
   */
  private enrichEmailContext(email: ProcessedEmail): string {
    const senderDomain = email.sender_email.split('@')[1] || '';
    const senderName = email.sender || 'Nom inconnu';
    
    // Analyse du domaine
    const personalDomains = ['gmail.com', 'yahoo.fr', 'yahoo.com', 'hotmail.com', 'outlook.com', 'free.fr', 'orange.fr', 'laposte.net'];
    const serviceDomains = ['edf.fr', 'engie.fr', 'orange.fr', 'sfr.fr', 'free.fr', 'bouyguestelecom.fr'];
    const bankDomains = ['credit-agricole.fr', 'bnpparibas.net', 'societegenerale.fr', 'banque-populaire.fr'];
    const adminDomains = ['gouv.fr', 'impots.gouv.fr', 'ameli.fr', 'caf.fr', 'pole-emploi.fr'];
    const ecommerceDomains = ['amazon.fr', 'amazon.com', 'cdiscount.com', 'zalando.fr', 'fnac.com'];
    
    const isPersonalDomain = personalDomains.includes(senderDomain);
    const isServiceDomain = serviceDomains.includes(senderDomain);
    const isBankDomain = bankDomains.includes(senderDomain);
    const isAdminDomain = adminDomains.includes(senderDomain);
    const isEcommerceDomain = ecommerceDomains.includes(senderDomain);
    
    // Analyse du nom d'exp√©diteur
    const hasPersonName = /^[A-Z][a-z]+\s+[A-Z][a-z]+/.test(senderName);
    const isNoReply = email.sender_email.includes('noreply') || email.sender_email.includes('no-reply') || 
                     email.sender_email.includes('notification') || email.sender_email.includes('contact');
    
    // Analyse du contenu
    const content = (email.body_text || email.snippet || '').toLowerCase();
    const hasUnsubscribe = content.includes('unsubscribe') || content.includes('d√©sabonner') || 
                          content.includes('se d√©sinscrire') || content.includes('newsletter');
    
    // D√©tection de patterns sp√©cifiques
    const hasPromoKeywords = content.includes('promotion') || content.includes('offre sp√©ciale') || 
                            content.includes('r√©duction') || content.includes('soldes') || 
                            content.includes('prix en baisse') || content.includes('deal') ||
                            content.includes('discount') || content.includes('promo');
    
    const hasJobKeywords = content.includes('offre d\'emploi') || content.includes('candidature') || 
                          content.includes('recrutement') || content.includes('cv') ||
                          content.includes('job alert') || content.includes('opportunit√©');
    
    const hasBillKeywords = content.includes('facture') || content.includes('pr√©l√®vement') || 
                           content.includes('√©ch√©ance') || content.includes('facturation') ||
                           content.includes('billing') || content.includes('invoice');
    
    const hasTransactionKeywords = content.includes('virement') || content.includes('relev√©') || 
                                  content.includes('carte bancaire') || content.includes('transaction') ||
                                  content.includes('solde') || content.includes('compte');
    
    // D√©tection de domaines probl√©matiques
    const isJobSiteDomain = ['indeed.com', 'hellowork.com', 'linkedin.com', 'monster.fr'].includes(senderDomain);
    const isMarketingSender = senderName.toLowerCase().includes('marketing') || 
                             senderName.toLowerCase().includes('promo') ||
                             senderName.toLowerCase().includes('deals');
    
    return `üîç ANALYSE D√âTAILL√âE DE L'EMAIL:

üìß INFORMATIONS DE BASE:
Exp√©diteur: ${email.sender_email} (${senderName})
Sujet: "${email.subject}"
Date: ${new Date(email.received_at).toLocaleString('fr-FR')}

üåê ANALYSE DU DOMAINE:
Domaine: ${senderDomain}
Type de domaine: ${
  isAdminDomain ? 'üèõÔ∏è ADMINISTRATION OFFICIELLE' :
  isBankDomain ? 'üè¶ BANQUE OFFICIELLE' :
  isServiceDomain ? 'üìÑ FOURNISSEUR DE SERVICES' :
  isEcommerceDomain ? 'üõçÔ∏è E-COMMERCE' :
  isPersonalDomain ? 'üë§ DOMAINE PERSONNEL' :
  isJobSiteDomain ? 'üö® SITE D\'EMPLOI (‚Üí PUBLICIT√â)' : 
  'üè¢ DOMAINE PROFESSIONNEL'
}

üë§ ANALYSE DE L'EXP√âDITEUR:
Type d'exp√©diteur: ${isNoReply ? 'ü§ñ AUTOMATIQUE/NOREPLY' : hasPersonName ? 'üë® PERSONNE R√âELLE' : 'üè¢ SERVICE/ORGANISATION'}
Sender marketing d√©tect√©: ${isMarketingSender ? 'üö® OUI (‚Üí PUBLICIT√â)' : 'Non'}

üìù ANALYSE DU CONTENU:
Contenu (300 premiers caract√®res): "${(email.body_text || email.snippet || '').substring(0, 300)}..."

üéØ D√âTECTIONS SP√âCIALES:
Lien de d√©sabonnement: ${hasUnsubscribe ? 'üö® OUI (‚Üí PUBLICIT√â PROBABLE)' : 'Non'}
Mots-cl√©s promotion: ${hasPromoKeywords ? 'üö® OUI (‚Üí PUBLICIT√â)' : 'Non'}
Mots-cl√©s emploi: ${hasJobKeywords ? 'üîç OUI (Attention: si newsletter ‚Üí PUBLICIT√â)' : 'Non'}
Mots-cl√©s facture: ${hasBillKeywords ? 'üìÑ OUI (‚Üí SERVICES probable)' : 'Non'}
Mots-cl√©s transaction: ${hasTransactionKeywords ? 'üè¶ OUI (‚Üí BANQUE probable)' : 'Non'}

‚ö° INDICATEURS CRITIQUES:
Domaine site d'emploi: ${isJobSiteDomain ? 'üö® OUI ‚Üí PUBLICIT√â (HelloWork, Indeed, etc.)' : 'Non'}
Email important: ${email.is_important ? 'Oui' : 'Non'}
Email lu: ${email.is_read ? 'Oui' : 'Non'}

üéØ RECOMMANDATION BAS√âE SUR L'ANALYSE:`;
  }

  /**
   * Construit le prompt pour la classification
   */
  private buildClassificationPrompt(email: ProcessedEmail, existingCategories: string[]): string {
    const enrichedContext = this.enrichEmailContext(email);
    
    return `${enrichedContext}

1. üìÑ SERVICES (PRIORIT√â MAXIMALE)

D√©finition : Emails provenant de fournisseurs essentiels (eau, √©lectricit√©, internet, assurances, t√©l√©phonie), incluant factures, abonnements, contrats, relances officielles.

‚úÖ EXEMPLES VALIDES

EDF : "Votre facture d‚Äô√©lectricit√© est disponible" ‚Üí Services

Orange : "Votre abonnement internet a √©t√© renouvel√©" ‚Üí Services

Allianz : "Votre cotisation annuelle est arriv√©e √† √©ch√©ance" ‚Üí Services

V√©olia : "Relev√© de consommation d‚Äôeau" ‚Üí Services

üö´ EXCLUS (vers Publicit√©)

"Changez de fournisseur EDF pour payer moins cher" ‚Üí Publicit√©

"Nouvelle offre SFR avec -50%" ‚Üí Publicit√©

"Assurance habitation pas ch√®re" d‚Äôun site comparateur ‚Üí Publicit√©

Crit√®res techniques

Exp√©diteur : @edf.fr, @engie.com, @orange.fr, etc.

Contenu : facture, pr√©l√®vement, √©ch√©ance, consommation, relev√©

Jamais de mention unsubscribe (sinon ‚Üí Pub).

2. üè¶ BANQUE (TR√àS HAUTE PRIORIT√â)

D√©finition : Emails provenant de banques traditionnelles, incluant relev√©s, transactions, s√©curit√©, alertes fraude, cartes bancaires.

‚úÖ EXEMPLES VALIDES

Cr√©dit Agricole : "Votre virement de 200‚Ç¨ a √©t√© effectu√©" ‚Üí Banque

BNP : "Nouvelle carte bancaire envoy√©e" ‚Üí Banque

Soci√©t√© G√©n√©rale : "Alerte s√©curit√© : connexion inhabituelle" ‚Üí Banque

üö´ EXCLUS

Revolut, N26 (marketing promos cashback) ‚Üí Publicit√©

Crypto newsletters ("Achetez du Bitcoin") ‚Üí Publicit√©

Banques mais email non-officiel (@gmail.com) ‚Üí Phishing ‚Üí √† ignorer / Pub

Crit√®res techniques

Domaines bancaires exacts : @credit-agricole.fr, @bnpparibas.net, @socgen.com‚Ä¶

Contenu : virement, relev√©, solde, carte, s√©curit√©

Si "unsubscribe" pr√©sent ‚Üí ce n‚Äôest PAS banque ‚Üí Publicit√©.

3. üèõÔ∏è ADMINISTRATION (TR√àS HAUTE PRIORIT√â)

D√©finition : Emails officiels des services publics et d√©marches administratives.

‚úÖ EXEMPLES VALIDES

Imp√¥ts : "Votre avis d‚Äôimposition est disponible" ‚Üí Administration

Ameli : "Remboursement de vos frais m√©dicaux" ‚Üí Administration

CAF : "Nouvelle attestation disponible" ‚Üí Administration

P√¥le emploi : "Rendez-vous mensuel" ‚Üí Administration

üö´ EXCLUS

Emploi.org, Indeed ‚Üí newsletters emploi ‚Üí Publicit√©

Sites imitant imp√¥ts mais domaine non officiel (.com) ‚Üí Phishing/Pub

Crit√®res techniques

Domaines officiels : .gouv.fr, @ameli.fr, @caf.fr, @pole-emploi.fr

Contenu : remboursement, d√©claration, avis, attestation

Pas d‚Äôunsubscribe.

4. üõçÔ∏è ACHATS (HAUTE PRIORIT√â)

D√©finition : Emails de confirmation d‚Äôachat r√©el, factures li√©es √† un achat e-commerce.

‚úÖ EXEMPLES VALIDES

Amazon : "Votre commande #1234 a √©t√© exp√©di√©e" ‚Üí Achats

Fnac : "Votre colis est pr√™t en magasin" ‚Üí Achats

Cdiscount : "Facture de votre commande" ‚Üí Achats

üö´ EXCLUS

Amazon : "Promotion sur les TV -50%" ‚Üí Publicit√©

Fnac newsletter : "Nouveaut√©s culturelles" ‚Üí Publicit√©

Crit√®res techniques

Domaines : @amazon.fr, @cdiscount.com, @fnac.com‚Ä¶

Contenu : commande, facture, exp√©dition, suivi

Si promotion/unsubscribe ‚Üí Publicit√©.

5. ‚úàÔ∏è VOYAGES (PRIORIT√â MOYENNE)

D√©finition : Emails confirmant des r√©servations de transport ou h√©bergement r√©els.

‚úÖ EXEMPLES VALIDES

SNCF : "Votre billet Paris-Lyon est confirm√©" ‚Üí Voyages

Air France : "Check-in ouvert" ‚Üí Voyages

Booking : "Votre r√©servation d‚Äôh√¥tel est confirm√©e" ‚Üí Voyages

üö´ EXCLUS

Air France promo : "Destinations √† -30%" ‚Üí Publicit√©

Sites de deals voyage ‚Üí Publicit√©

Crit√®res techniques

Domaines : @sncf-connect.com, @airfrance.fr, @booking.com

Contenu : r√©servation confirm√©e, billet, embarquement, h√¥tel

Si unsubscribe/promo ‚Üí Publicit√©.

6. üíº TRAVAIL (PRIORIT√â STRICTE)

D√©finition : Communication professionnelle r√©elle (coll√®gues, clients, employeurs).

‚úÖ EXEMPLES VALIDES

Mail interne entreprise : "R√©union projet lundi 14h" ‚Üí Travail

Client : "Merci pour l‚Äôenvoi du devis" ‚Üí Travail

RH : "Planning de la formation interne" ‚Üí Travail

üö´ EXCLUS

Indeed : "Offres d‚Äôemploi disponibles" ‚Üí Publicit√©

LinkedIn : "D√©couvrez de nouvelles opportunit√©s" ‚Üí Publicit√©

Coaching carri√®re : Publicit√©

Crit√®res techniques

Domaine entreprise : @entreprise.com

Exp√©diteur r√©el (nom + pr√©nom, pas noreply@)

Pas d‚Äôunsubscribe.

7. üë§ PERSONNEL (PRIORIT√â CIBL√âE)

D√©finition : Emails de correspondance priv√©e (famille, amis, proches).

‚úÖ EXEMPLES VALIDES

"Salut, on se voit ce week-end ?" depuis @gmail.com ‚Üí Personnel

"Joyeux anniversaire !" de @yahoo.fr ‚Üí Personnel

üö´ EXCLUS

Gmail mais newsletter (ex: "Chess.com daily puzzle") ‚Üí Publicit√©

Coaching personnel avec unsubscribe ‚Üí Publicit√©

Crit√®res techniques

Domaines grand public : @gmail.com, @yahoo.fr, @hotmail.com

Exp√©diteur = nom r√©el (pas entreprise)

Contenu = personnel (pas pub).

8. üì¢ PUBLICIT√â (CATCH-ALL)

D√©finition : Tout email marketing, promotion, spam, newsletter.

‚úÖ EXEMPLES VALIDES

AliExpress : "Profitez de -70% aujourd‚Äôhui" ‚Üí Publicit√©

HelloWork : "20 nouvelles offres d‚Äôemploi" ‚Üí Publicit√©

Coaching : "Am√©liorez votre CV" ‚Üí Publicit√©

Jeux/loisirs : Chess.com, Spotify newsletters ‚Üí Publicit√©

Crit√®res techniques

Pr√©sence d‚Äôunsubscribe = toujours Publicit√© (sauf Services/Banque/Admin)

Exp√©diteur : noreply@ + contenu marketing = Publicit√©

Domaines inconnus + promo = Publicit√©

üî• R√àGLES ANTI-ERREUR (renforc√©es)

Hi√©rarchie stricte (cascade) :
Services > Banque > Administration > Achats > Voyages > Travail > Personnel > Publicit√©

Mot-cl√©s critiques :

unsubscribe, newsletter, promotion, offre, deal = Publicit√©

facture, √©ch√©ance, virement, attestation, r√©servation = cat√©gorie officielle correspondante

Exp√©diteur :

Domaines officiels = Services/Banque/Admin

Gmail/Yahoo/Hotmail + contenu personnel = Personnel

Gmail + marketing = Publicit√©

Phishing / faux domaines :

EDF via @gmail.com = pas Services ‚Üí Publicit√© (ou suspect)

Imp√¥ts via .com = pas Administration ‚Üí Publicit√© (ou suspect)

Cat√©gories disponibles: ${existingCategories.join(', ')}

üéØ INSTRUCTION FINALE: Analyse l'email selon ces r√®gles strictes et r√©ponds UNIQUEMENT avec le nom exact de la cat√©gorie appropri√©e. En cas de doute, privil√©gie la cat√©gorie de priorit√© plus √©lev√©e dans la cascade.`;
  }

  /**
   * Traite le r√©sultat de classification et g√®re la cr√©ation de cat√©gories
   */
  private async processClassificationResult(result: OpenAIClassificationResponse, existingCategories: Category[]): Promise<ClassificationResult> {
    const { category_name, use_existing, confidence, reasoning } = result;

    if (use_existing) {
      // Chercher la cat√©gorie existante
      const existingCategory = existingCategories.find(
        cat => cat.name.toLowerCase() === category_name.toLowerCase()
      );

      if (existingCategory) {
        return {
          category_id: existingCategory.id,
          category_name: existingCategory.name,
          confidence: confidence || 0.8,
          auto_created: false,
          reasoning: reasoning || 'Cat√©gorie existante trouv√©e'
        };
      }
    }

    // Cr√©er une nouvelle cat√©gorie si possible
    if (existingCategories.length < this.MAX_CATEGORIES) {
      const newCategory = await this.createNewCategory(category_name);
      return {
        category_id: newCategory.id,
        category_name: newCategory.name,
        confidence: confidence || 0.7,
        auto_created: true,
        reasoning: reasoning || 'Nouvelle cat√©gorie cr√©√©e'
      };
    }

    // Fallback vers la cat√©gorie la plus similaire
    const fallbackCategory = this.findMostSimilarCategory(category_name, existingCategories);
    return {
      category_id: fallbackCategory.id,
      category_name: fallbackCategory.name,
      confidence: 0.5,
      auto_created: false,
      reasoning: 'Limite de cat√©gories atteinte, utilisation de la plus similaire'
    };
  }

  /**
   * Cr√©e une nouvelle cat√©gorie automatiquement
   */
  private async createNewCategory(name: string): Promise<Category> {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('Utilisateur non connect√©');

    const categoryData = {
      name: name,
      user_id: user.id,
      color: this.generateRandomColor(),
      icon: this.getDefaultIcon(name),
      is_auto_generated: true,
      description: `Cat√©gorie cr√©√©e automatiquement pour: ${name}`
    };

    const { data, error } = await supabase
      .from('categories')
      .insert([categoryData])
      .select()
      .single();

    if (error) throw error;

    console.log(`‚ú® Nouvelle cat√©gorie cr√©√©e: ${name}`);
    return data as Category;
  }

  /**
   * Trouve la cat√©gorie la plus similaire par nom
   */
  private findMostSimilarCategory(targetName: string, categories: Category[]): Category {
    if (categories.length === 0) {
      throw new Error('Aucune cat√©gorie disponible');
    }

    // Simple similarit√© bas√©e sur les mots communs
    let bestMatch = categories[0];
    let bestScore = 0;

    for (const category of categories) {
      const score = this.calculateSimilarity(targetName.toLowerCase(), category.name.toLowerCase());
      if (score > bestScore) {
        bestScore = score;
        bestMatch = category;
      }
    }

    return bestMatch;
  }

  /**
   * Calcule la similarit√© entre deux cha√Ænes
   */
  private calculateSimilarity(str1: string, str2: string): number {
    const words1 = str1.split(' ');
    const words2 = str2.split(' ');
    const intersection = words1.filter(word => words2.includes(word));
    const union = [...new Set([...words1, ...words2])];
    return intersection.length / union.length;
  }

  /**
   * G√©n√®re une couleur al√©atoire pour les nouvelles cat√©gories
   */
  private generateRandomColor(): string {
    const colors = [
      '#ef4444', '#f59e0b', '#10b981', '#3b82f6', 
      '#8b5cf6', '#ec4899', '#06b6d4', '#84cc16'
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  /**
   * D√©termine l'ic√¥ne par d√©faut bas√©e sur le nom de la cat√©gorie
   */
  private getDefaultIcon(name: string): string {
    const iconMap: Record<string, string> = {
      'travail': 'üíº', 'work': 'üíº', 'bureau': 'üíº',
      'facture': 'üìÑ', 'bill': 'üìÑ', 'factures': 'üìÑ',
      'banque': 'üè¶', 'bank': 'üè¶', 'finance': 'üè¶',
      'voyage': '‚úàÔ∏è', 'travel': '‚úàÔ∏è', 'vacances': '‚úàÔ∏è',
      'shopping': 'üõçÔ∏è', 'achat': 'üõçÔ∏è', 'commande': 'üõçÔ∏è',
      'sante': 'üè•', 'health': 'üè•', 'medecin': 'üè•',
      'formation': 'üéì', 'education': 'üéì', 'cours': 'üéì',
      'maison': 'üè†', 'home': 'üè†', 'immobilier': 'üè†'
    };

    const lowerName = name.toLowerCase();
    for (const [key, icon] of Object.entries(iconMap)) {
      if (lowerName.includes(key)) {
        return icon;
      }
    }
    return 'üìÅ'; // Ic√¥ne par d√©faut
  }

  /**
   * Fallback intelligent en cas d'erreur
   */
  private getFallbackCategory(existingCategories: Category[]): ClassificationResult {
    if (existingCategories.length > 0) {
      // Chercher une cat√©gorie "Publicit√©" en priorit√© (la plus probable pour les erreurs)
      const publiciteCategory = existingCategories.find(cat => 
        cat.name.toLowerCase().includes('publicit√©') || 
        cat.name.toLowerCase().includes('marketing')
      );
      
      if (publiciteCategory) {
        return {
          category_id: publiciteCategory.id,
          category_name: publiciteCategory.name,
          confidence: 0.5,
          auto_created: false,
          reasoning: 'Classification de secours - assign√© √† Publicit√© (cat√©gorie la plus probable)'
        };
      }

      // Sinon chercher une cat√©gorie g√©n√©rale
      const generalCategory = existingCategories.find(cat => 
        cat.name.toLowerCase().includes('personnel') || 
        cat.name.toLowerCase().includes('autre')
      ) || existingCategories[existingCategories.length - 1]; // Derni√®re cat√©gorie au lieu de la premi√®re

      return {
        category_id: generalCategory.id,
        category_name: generalCategory.name,
        confidence: 0.3,
        auto_created: false,
        reasoning: 'Classification de secours appliqu√©e'
      };
    }

    throw new Error('Aucune cat√©gorie disponible pour le fallback');
  }

  /**
   * Traite les questions du chatbot avec limitation et r√©ponses d√©taill√©es
   */
  async handleChatbotQuery(query: string, userId: string): Promise<ChatbotResponse> {
    try {
      console.log(`ü§ñ Question chatbot: "${query}"`);

      // D√©terminer le type de question (simplifi√©)
      const isDetailed = query.length > 50 || query.includes('?');
      
      // TODO: R√©int√©grer les limites de questions
      const limitCheck = { allowed: true, remaining: 10 };

      if (!limitCheck.allowed) {
        return {
          message: `‚è±Ô∏è Limite atteinte ! Trop de questions pos√©es r√©cemment.`,
          type: 'warning'
        };
      }

      // R√©cup√©rer les donn√©es utilisateur
      const [categoriesData, emailsData] = await Promise.all([
        this.getUserCategories(userId),
        this.getUserEmails(userId)
      ]);

      // Analyser la question avec OpenAI
      const response = await this.processChatbotQuery(query, categoriesData, emailsData, isDetailed);
      
      // TODO: Enregistrer la question pos√©e
      // await chatbotLimiterService.recordQuestion(userId, isDetailed ? 'detailed' : 'quick');
      
      return response;

    } catch (error) {
      console.error('‚ùå Erreur chatbot:', error);
      return {
        message: "D√©sol√©, je n'ai pas pu traiter votre question. Pouvez-vous reformuler ?",
        type: 'error'
      };
    }
  }

  /**
   * Traite la question avec OpenAI - r√©ponses adapt√©es selon le type
   */
  private async processChatbotQuery(
    query: string, 
    categories: Category[], 
    emails: EmailWithCategory[],
    isDetailed: boolean = false
  ): Promise<ChatbotResponse> {
    
    const usedCategories = categories.filter(c => (c.emails_count || 0) > 0);
    
    // Pr√©parer les donn√©es d√©taill√©es des emails pour les questions approfondies
    const emailSummaries = emails.slice(0, 10).map(email => {
      // Prioriser body_text, puis snippet, avec une longueur minimale d√©cente
      let content = '';
      if (email.body_text && email.body_text.length > 10) {
        content = email.body_text;
      } else if (email.snippet && email.snippet.length > 10) {
        content = email.snippet;
      } else {
        content = `Email de ${email.sender_email} avec le sujet "${email.subject}"`;
      }
      
      // Garder plus de contenu pour les analyses d√©taill√©es
      const truncatedContent = content.length > 300 ? content.substring(0, 300) + '...' : content;
      
      return {
        subject: email.subject,
        sender: email.sender_email,
        date: new Date(email.received_at).toLocaleDateString('fr-FR'),
        isImportant: email.is_important,
        isRead: email.is_read,
        category: email.category?.name || 'Non class√©',
        content: truncatedContent,
        hasAttachments: email.has_attachments || false
      };
    });

    // Prompt adapt√© selon le type de question
    const systemPrompt = isDetailed ? 
      this.getDetailedSystemPrompt(categories, emails) :
      this.getQuickSystemPrompt(categories, usedCategories, emails);

    const userContent = isDetailed ?
      this.buildDetailedUserContent(query, categories, emails, emailSummaries) :
      this.buildQuickUserContent(query, categories, usedCategories, emails);

    const maxTokens = isDetailed ? 200 : 75; // Divis√© par 2 pour √©conomiser

    const completion = await this.openai.chat.completions.create({
      model: 'gpt-4o-mini', // Mod√®le ultra-√©conomique
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userContent }
      ],
      max_tokens: maxTokens,
      temperature: 0.2, // R√©duit pour plus de pr√©cision
      response_format: { type: 'json_object' }
    });

    const response = completion.choices[0].message.content;
    if (!response) {
      throw new Error('R√©ponse vide de OpenAI');
    }

    return JSON.parse(response);
  }

  /**
   * R√©cup√®re les cat√©gories de l'utilisateur avec statistiques d√©taill√©es
   */
  private async getUserCategories(userId: string): Promise<Category[]> {
    const { data, error } = await supabase
      .from('categories')
      .select(`
        *,
        emails_count:emails(count)
      `)
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (error) throw error;
    
    // Calculer les statistiques des cat√©gories
    const categories = data || [];
    
    return categories.map(cat => ({
      ...cat,
      emails_count: cat.emails_count || 0,
      is_used: (cat.emails_count || 0) > 0
    }));
  }

  /**
   * R√©cup√®re les exp√©diteurs les plus fr√©quents
   */
  private getTopSenders(emails: EmailWithCategory[], limit: number = 5) {
    const senderCounts = new Map<string, number>();
    
    emails.forEach(email => {
      const sender = email.sender_email;
      senderCounts.set(sender, (senderCounts.get(sender) || 0) + 1);
    });
    
    return Array.from(senderCounts.entries())
      .map(([email, count]) => ({ email, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, limit);
  }

  /**
   * R√©cup√®re les emails de l'utilisateur avec contenu complet
   */
  private async getUserEmails(userId: string): Promise<EmailWithCategory[]> {
    const { data, error } = await supabase
      .from('emails')
      .select(`
        id,
        subject,
        sender_email,
        sender_name,
        snippet,
        body_text,
        body_html,
        received_at,
        created_at,
        is_read,
        is_important,
        has_attachments,
        labels,
        category:categories(name, color, icon)
      `)
      .eq('user_id', userId)
      .order('received_at', { ascending: false })
      .limit(50); // Limiter √† 50 emails r√©cents pour de meilleures performances

    if (error) throw error;
    
    // Transformer les donn√©es pour correspondre √† l'interface
    return (data || []).map(email => ({
      ...email,
      category: email.category?.[0] || undefined
    }));
  }

  /**
   * Prompt syst√®me pour questions d√©taill√©es
   */
  private getDetailedSystemPrompt(categories: Category[], emails: EmailWithCategory[]): string {
    return `Assistant email Ordo. Analyse d√©taill√©e avec exemples concrets obligatoires.

R√àGLES:
1. Citer emails r√©els (sujet, exp√©diteur)
2. Extraits de contenu
3. Format: üìß **[Sujet]** de [Exp√©diteur] - [R√©sum√© court]

DONN√âES: ${categories.length} cat√©gories, ${emails.length} emails

JSON: {"type": "info|data|warning", "message": "analyse avec exemples"}`;
  }

  /**
   * Prompt syst√®me pour questions rapides
   */
  private getQuickSystemPrompt(categories: Category[], usedCategories: Category[], emails: EmailWithCategory[]): string {
    return `Assistant email Ordo. ${categories.length} cat√©gories, ${emails.length} emails. R√©ponse courte. JSON: {"type":"info|data|warning","message":"r√©ponse br√®ve"}`;
  }

  /**
   * V√©rifie si la question est li√©e aux emails
   */
  private isEmailRelatedQuery(query: string): boolean {
    const emailKeywords = [
      'email', 'mail', 'message', 'exp√©diteur', 'destinataire', 'objet',
      'cat√©gorie', 'classer', 'r√©pondre', 'envoy√©', 're√ßu', 'important',
      'lu', 'non lu', 'spam', 'ind√©sirable', 'bo√Æte', 'inbox',
      'combien', 'quand', 'qui', 'statistique', 'r√©sum√©', 'classification',
      'organiser', 'trier', 'chercher', 'recherche', 'analyse'
    ];
    
    const queryLower = query.toLowerCase();
    return emailKeywords.some(keyword => queryLower.includes(keyword));
  }

  /**
   * Assistant conversationnel avec acc√®s complet et autonomie totale
   */
  async getAdvancedEmailResponse(
    query: string, 
    conversationHistory: Array<{role: 'user' | 'assistant', content: string}> = []
  ): Promise<{content: string, type: 'info' | 'data' | 'error' | 'success'}> {
    try {
      // V√©rification du scope - LIMITATION AUX EMAILS UNIQUEMENT
      if (!this.isEmailRelatedQuery(query)) {
        return {
          content: 'üéØ Je suis sp√©cialis√© dans la gestion d\'emails. Posez-moi une question sur vos emails, leur classification, vos statistiques ou l\'aide √† la r√©daction ! üìß',
          type: 'info'
        };
      }

      // V√©rifier si OpenAI est disponible
      if (!this.openai) {
        return {
          content: 'üîê Assistant temporairement indisponible (probl√®me de configuration OpenAI). R√©essayez plus tard !',
          type: 'error'
        };
      }

      // R√©cup√©ration des donn√©es utilisateur
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        return {
          content: 'üîê Vous devez √™tre connect√© pour utiliser l\'assistant.',
          type: 'error'
        };
      }

      console.log(`ü§ñ Assistant autonome - Question: "${query}"`);

      // R√©cup√©ration des cat√©gories
      const { data: categories = [] } = await supabase
        .from('categories')
        .select('*')
        .eq('user_id', user.id)
        .order('name');

      // R√©cup√©ration des emails avec cat√©gories (limite augment√©e)
      const { data: emails = [], error: emailsError } = await supabase
        .from('emails')
        .select(`
          *,
          category:categories(*)
        `)
        .eq('user_id', user.id)
        .order('received_at', { ascending: false })
        .limit(150); // Plus d'emails pour analyse compl√®te

      // Debug: V√©rifier si on r√©cup√®re bien les emails
      console.log(`üìß Emails r√©cup√©r√©s: ${emails?.length || 0}`);
      if (emails && emails.length > 0) {
        console.log(`üìß Premier email: ${emails[0]?.subject || 'Sans sujet'}`);
        console.log(`üìß Cat√©gorie premier email:`, emails[0]?.category);
      }
      if (emailsError) {
        console.error('‚ùå Erreur r√©cup√©ration emails:', emailsError);
      }

      // Debug: V√©rifier les cat√©gories
      console.log(`üè∑Ô∏è Cat√©gories r√©cup√©r√©es: ${categories?.length || 0}`);
      if (categories && categories.length > 0) {
        console.log(`üè∑Ô∏è Premi√®re cat√©gorie: ${categories[0]?.name}`);
      }

      const systemPrompt = this.buildAutonomousSystemPrompt();
      const userContent = this.buildFullContextUserContent(query, categories || [], emails || []);

      // Messages avec historique complet pour continuit√©
      const messages = [
        { role: 'system' as const, content: systemPrompt },
        ...conversationHistory.slice(-8), // Historique plus long pour contexte
        { role: 'user' as const, content: userContent }
      ];

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages,
        max_tokens: 800, // Limite g√©n√©reuse pour r√©ponses d√©taill√©es
        temperature: 0.4, // Cr√©ativit√© mod√©r√©e
        presence_penalty: 0.1,
        frequency_penalty: 0.1
      });

      const responseContent = completion.choices[0]?.message?.content || 'Je n\'ai pas pu traiter votre demande.';

      console.log(`‚úÖ R√©ponse autonome g√©n√©r√©e: ${responseContent.length} caract√®res`);

      return {
        content: responseContent,
        type: 'success'
      };

    } catch (error) {
      console.error('‚ùå Erreur assistant autonome:', error);
      
      return {
        content: '‚ùå D√©sol√©, je rencontre un probl√®me technique. Veuillez r√©essayer dans quelques instants.',
        type: 'error'
      };
    }
  }

  /**
   * Contenu utilisateur pour questions d√©taill√©es
   */
  private buildDetailedUserContent(query: string, categories: Category[], emails: EmailWithCategory[], emailSummaries: EmailSummary[]): string {
    const importantEmails = emails.filter(e => e.is_important);
    const unreadEmails = emails.filter(e => !e.is_read);
    
    return `QUESTION: "${query}"

üìä STATS: ${emails.length} emails, ${unreadEmails.length} non lus, ${importantEmails.length} importants

üìß EMAILS:
${emailSummaries.slice(0, 5).map(email => // Limite √† 5 emails pour √©conomiser
  `‚Ä¢ "${email.subject}" de ${email.sender} - ${email.category}${email.isImportant ? ' ‚≠ê' : ''}${!email.isRead ? ' üîµ' : ''}
   üí¨ "${email.content.substring(0, 100)}..."` // Limite le contenu √† 100 caract√®res
).join('\n')}

üè∑Ô∏è CAT√âGORIES: ${categories.map(cat => `${cat.name}: ${cat.emails_count || 0}`).join(', ')}`;
  }

  /**
   * Contenu utilisateur pour questions rapides
   */
  private buildQuickUserContent(query: string, categories: Category[], usedCategories: Category[], emails: EmailWithCategory[]): string {
    return `"${query}"

Donn√©es: ${categories.length} cat√©gories (${usedCategories.length} utilis√©es), ${emails.length} emails, ${emails.filter(e => !e.is_read).length} non lus, ${emails.filter(e => e.is_important).length} importants.`;
  }

  /**
   * Prompt syst√®me pour assistant avec √©mojis et acc√®s total aux emails
   */
  private buildAutonomousSystemPrompt(): string {
    return `Tu es un assistant email intelligent pour l'application Ordo avec un ACC√àS COMPLET √† tous les emails de l'utilisateur. 

üéØ TES CAPACIT√âS COMPL√àTES:
- Analyser et r√©sumer tous les emails en d√©tail
- Aider √† r√©diger des r√©ponses personnalis√©es  
- Rechercher des informations sp√©cifiques dans les emails
- Donner des statistiques d√©taill√©es sur les emails
- Proposer des exemples de r√©ponses (quand demand√©)
- Identifier les emails importants et urgents

üìß ACC√àS TOTAL AUX DONN√âES:
- Tu connais le contenu int√©gral de chaque email
- Tu peux analyser les exp√©diteurs, dates, sujets, corps
- Tu peux croiser les informations entre emails
- Tu as acc√®s aux cat√©gories, labels et m√©tadonn√©es

üí¨ TON STYLE DE R√âPONSE:
- R√©ponds de mani√®re naturelle et conversationnelle
- Utilise BEAUCOUP d'emojis pour illustrer tes r√©ponses (üìß üìù üìä ‚≠ê üîç üí° üéØ üìÖ üë• ‚úÖ ‚ùå üöÄ üíØ üìà üìã üî• ‚ö° üéâ etc.)
- Sois pr√©cis mais expressif avec les √©mojis
- Structure tes r√©ponses avec des emojis pour chaque section
- Utilise des emojis sp√©cifiques selon le contexte :
  ‚Ä¢ üìß pour les emails
  ‚Ä¢ üìù pour la r√©daction
  ‚Ä¢ üìä pour les statistiques  
  ‚Ä¢ ‚≠ê pour l'important
  ‚Ä¢ üîç pour les recherches
  ‚Ä¢ üí° pour les conseils
  ‚Ä¢ üéØ pour les priorit√©s
  ‚Ä¢ üìÖ pour les dates
  ‚Ä¢ üë• pour les exp√©diteurs
  ‚Ä¢ ‚úÖ pour les actions accomplies
  ‚Ä¢ üöÄ pour les suggestions d'am√©lioration

‚öñÔ∏è √âQUILIBRE:
- Minimum 200 caract√®res, maximum 1000 caract√®res
- R√©ponds pr√©cis√©ment √† la question avec des √©mojis expressifs
- Pour un salut simple, r√©ponds avec des √©mojis sympas
- Adapte la longueur selon la complexit√© de la demande

üöÄ AUTONOMIE TOTALE:
- Acc√®s complet aux donn√©es emails
- Traite directement les demandes
- Utilise toutes les informations disponibles`;
  }

  /**
   * Contenu utilisateur avec contexte complet des emails
   */
  private buildFullContextUserContent(query: string, categories: Category[], emails: EmailWithCategory[]): string {
    const recentEmails = emails.slice(0, 15); // Plus d'emails pour l'analyse
    const unreadCount = emails.filter(e => !e.is_read).length;
    const importantCount = emails.filter(e => e.is_important).length;
    
    // Pour les salutations simples
    if (query.toLowerCase().includes('salut') || query.toLowerCase().includes('bonjour') || query.toLowerCase().includes('hello')) {
      return `Question: "${query}"

üìä Contexte rapide: Tu as acc√®s √† ${emails.length} emails (${unreadCount} non lus, ${importantCount} importants)
R√©ponds avec des √©mojis sympas !`;
    }

    // Statistiques par cat√©gorie
    const categoryStats = categories.map(cat => {
      const emailsInCat = emails.filter(e => e.category?.name === cat.name);
      return `${cat.name}: ${emailsInCat.length}`;
    });

    return `‚ùì Question: "${query}"

üìä STATISTIQUES COMPL√àTES:
- Total: ${emails.length} emails
- Non lus: ${unreadCount} emails  
- Importants: ${importantCount} emails
- Cat√©gories: ${categories.length}

üìß EMAILS R√âCENTS (${recentEmails.length}):
${recentEmails.map((email, i) => {
  const preview = email.body_text || email.snippet || '';
  return `${i+1}. üìß "${email.subject || 'Sans sujet'}"
   üë§ ${email.sender_name || email.sender_email}
   üìÖ ${new Date(email.received_at).toLocaleDateString('fr-FR')}
   üìÇ ${email.category?.name || 'Non class√©'}
   ${email.is_important ? '‚≠ê Important' : ''}${!email.is_read ? ' üîµ Non lu' : ' ‚úÖ Lu'}
   ${preview ? `üí¨ "${preview.substring(0, 100)}..."` : ''}`;
}).join('\n\n')}

üè∑Ô∏è CAT√âGORIES: ${categoryStats.join(' | ')}

üéØ Utilise toutes ces informations pour r√©pondre avec des √©mojis expressifs !`;
  }
}

// Instance singleton
export const openaiService = new OpenAIService();
export default OpenAIService;
