import OpenAI from 'openai';
import { supabase } from '../lib/supabase';
import type { ProcessedEmail } from './gmail';
import type { Category } from './classification';
import { chatbotLimiterService } from './chatbotLimiter';

interface EmailContext {
  id: string;
  subject: string;
  sender_name: string;
  sender_email: string;
  received_at: string;
  body_text?: string;
  snippet?: string;
  is_read: boolean;
  is_important: boolean;
  category?: string;
  labels?: string[];
  attachments?: unknown[];
}

interface ConversationMessage {
  content: string;
  isUser: boolean;
}

export interface ClassificationResult {
  category_id: string;
  category_name: string;
  confidence: number;
  auto_created: boolean;
  reasoning: string;
}

export interface ChatbotResponse {
  message: string;
  data?: unknown;
  type: 'info' | 'data' | 'error' | 'warning';
}

interface OpenAIClassificationResponse {
  category_name: string;
  use_existing: boolean;
  confidence: number;
  reasoning: string;
}

interface EmailSummary {
  subject: string;
  sender: string;
  date: string;
  isImportant: boolean;
  isRead: boolean;
  category: string;
  content: string;
  hasAttachments: boolean;
}

interface EmailWithCategory {
  id: string;
  subject: string;
  sender_email: string;
  sender_name?: string;
  snippet: string;
  body_text?: string;
  body_html?: string;
  received_at: string;
  created_at: string;
  is_read: boolean;
  is_important: boolean;
  has_attachments?: boolean;
  labels?: string[];
  category?: {
    name: string;
    color: string;
    icon: string;
  };
}

class OpenAIService {
  private openai: OpenAI;
  private readonly MAX_CATEGORIES = 8;
  private readonly MIN_CATEGORIES = 1;

  constructor() {
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    if (!apiKey) {
      throw new Error('Cl√© API OpenAI manquante dans les variables d\'environnement');
    }
    
    this.openai = new OpenAI({
      apiKey: apiKey,
      dangerouslyAllowBrowser: true // Pour utilisation c√¥t√© client
    });
  }

  /**
   * Classifie un email en utilisant GPT-4o-mini (mod√®le ultra-√©conomique)
   */
  async classifyEmail(email: ProcessedEmail, existingCategories: Category[]): Promise<ClassificationResult> {
    try {
      console.log(`ü§ñ Classification OpenAI de l'email: "${email.subject}"`);

      const existingCategoryNames = existingCategories.map(cat => cat.name);
      const categoryCount = existingCategories.length;

      const prompt = this.buildClassificationPrompt(email, existingCategoryNames, categoryCount);

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini', // Mod√®le ultra-√©conomique (60x moins cher que GPT-4)
        messages: [
          {
            role: 'system',
            content: 'Tu es un assistant expert en classification d\'emails. Tu dois analyser un email et d√©terminer sa cat√©gorie la plus appropri√©e.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 100, // Divis√© par 2 pour √©conomiser
        temperature: 0.1, // Faible pour des r√©sultats plus d√©terministes
        response_format: { type: 'json_object' }
      });

      const response = completion.choices[0].message.content;
      if (!response) {
        throw new Error('R√©ponse vide de OpenAI');
      }

      const result = JSON.parse(response);
      console.log('üìä R√©sultat de classification:', result);

      return await this.processClassificationResult(result, existingCategories);

    } catch (error) {
      console.error('‚ùå Erreur lors de la classification OpenAI:', error);
      // Fallback vers une cat√©gorie par d√©faut
      return this.getFallbackCategory(existingCategories);
    }
  }

  /**
   * Construit le prompt pour la classification
   */
  private buildClassificationPrompt(email: ProcessedEmail, existingCategories: string[], categoryCount: number): string {
    return `Email:
Exp√©diteur: ${email.sender_email}
Sujet: ${email.subject}
Contenu: ${email.snippet}

Cat√©gories: ${existingCategories.join(', ') || 'Aucune'}

${categoryCount >= this.MAX_CATEGORIES ? 
  'LIMITE: Utilise cat√©gorie existante uniquement.' : 
  'Peut cr√©er nouvelle cat√©gorie (max 8).'}

JSON: {"category_name":"nom","use_existing":true/false,"confidence":0.0-1.0,"reasoning":"court"}`;
  }

  /**
   * Traite le r√©sultat de classification et g√®re la cr√©ation de cat√©gories
   */
  private async processClassificationResult(result: OpenAIClassificationResponse, existingCategories: Category[]): Promise<ClassificationResult> {
    const { category_name, use_existing, confidence, reasoning } = result;

    if (use_existing) {
      // Chercher la cat√©gorie existante
      const existingCategory = existingCategories.find(
        cat => cat.name.toLowerCase() === category_name.toLowerCase()
      );

      if (existingCategory) {
        return {
          category_id: existingCategory.id,
          category_name: existingCategory.name,
          confidence: confidence || 0.8,
          auto_created: false,
          reasoning: reasoning || 'Cat√©gorie existante trouv√©e'
        };
      }
    }

    // Cr√©er une nouvelle cat√©gorie si possible
    if (existingCategories.length < this.MAX_CATEGORIES) {
      const newCategory = await this.createNewCategory(category_name);
      return {
        category_id: newCategory.id,
        category_name: newCategory.name,
        confidence: confidence || 0.7,
        auto_created: true,
        reasoning: reasoning || 'Nouvelle cat√©gorie cr√©√©e'
      };
    }

    // Fallback vers la cat√©gorie la plus similaire
    const fallbackCategory = this.findMostSimilarCategory(category_name, existingCategories);
    return {
      category_id: fallbackCategory.id,
      category_name: fallbackCategory.name,
      confidence: 0.5,
      auto_created: false,
      reasoning: 'Limite de cat√©gories atteinte, utilisation de la plus similaire'
    };
  }

  /**
   * Cr√©e une nouvelle cat√©gorie automatiquement
   */
  private async createNewCategory(name: string): Promise<Category> {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) throw new Error('Utilisateur non connect√©');

    const categoryData = {
      name: name,
      user_id: user.id,
      color: this.generateRandomColor(),
      icon: this.getDefaultIcon(name),
      is_auto_generated: true,
      description: `Cat√©gorie cr√©√©e automatiquement pour: ${name}`
    };

    const { data, error } = await supabase
      .from('categories')
      .insert([categoryData])
      .select()
      .single();

    if (error) throw error;

    console.log(`‚ú® Nouvelle cat√©gorie cr√©√©e: ${name}`);
    return data as Category;
  }

  /**
   * Trouve la cat√©gorie la plus similaire par nom
   */
  private findMostSimilarCategory(targetName: string, categories: Category[]): Category {
    if (categories.length === 0) {
      throw new Error('Aucune cat√©gorie disponible');
    }

    // Simple similarit√© bas√©e sur les mots communs
    let bestMatch = categories[0];
    let bestScore = 0;

    for (const category of categories) {
      const score = this.calculateSimilarity(targetName.toLowerCase(), category.name.toLowerCase());
      if (score > bestScore) {
        bestScore = score;
        bestMatch = category;
      }
    }

    return bestMatch;
  }

  /**
   * Calcule la similarit√© entre deux cha√Ænes
   */
  private calculateSimilarity(str1: string, str2: string): number {
    const words1 = str1.split(' ');
    const words2 = str2.split(' ');
    const intersection = words1.filter(word => words2.includes(word));
    const union = [...new Set([...words1, ...words2])];
    return intersection.length / union.length;
  }

  /**
   * G√©n√®re une couleur al√©atoire pour les nouvelles cat√©gories
   */
  private generateRandomColor(): string {
    const colors = [
      '#ef4444', '#f59e0b', '#10b981', '#3b82f6', 
      '#8b5cf6', '#ec4899', '#06b6d4', '#84cc16'
    ];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  /**
   * D√©termine l'ic√¥ne par d√©faut bas√©e sur le nom de la cat√©gorie
   */
  private getDefaultIcon(name: string): string {
    const iconMap: Record<string, string> = {
      'travail': 'üíº', 'work': 'üíº', 'bureau': 'üíº',
      'facture': 'üìÑ', 'bill': 'üìÑ', 'factures': 'üìÑ',
      'banque': 'üè¶', 'bank': 'üè¶', 'finance': 'üè¶',
      'voyage': '‚úàÔ∏è', 'travel': '‚úàÔ∏è', 'vacances': '‚úàÔ∏è',
      'shopping': 'üõçÔ∏è', 'achat': 'üõçÔ∏è', 'commande': 'üõçÔ∏è',
      'sante': 'üè•', 'health': 'üè•', 'medecin': 'üè•',
      'formation': 'üéì', 'education': 'üéì', 'cours': 'üéì',
      'maison': 'üè†', 'home': 'üè†', 'immobilier': 'üè†'
    };

    const lowerName = name.toLowerCase();
    for (const [key, icon] of Object.entries(iconMap)) {
      if (lowerName.includes(key)) {
        return icon;
      }
    }
    return 'üìÅ'; // Ic√¥ne par d√©faut
  }

  /**
   * Fallback en cas d'erreur
   */
  private getFallbackCategory(existingCategories: Category[]): ClassificationResult {
    if (existingCategories.length > 0) {
      const generalCategory = existingCategories.find(cat => 
        cat.name.toLowerCase().includes('g√©n√©ral') || 
        cat.name.toLowerCase().includes('autre')
      ) || existingCategories[0];

      return {
        category_id: generalCategory.id,
        category_name: generalCategory.name,
        confidence: 0.3,
        auto_created: false,
        reasoning: 'Classification de secours appliqu√©e'
      };
    }

    throw new Error('Aucune cat√©gorie disponible pour le fallback');
  }

  /**
   * Traite les questions du chatbot avec limitation et r√©ponses d√©taill√©es
   */
  async handleChatbotQuery(query: string, userId: string): Promise<ChatbotResponse> {
    try {
      console.log(`ü§ñ Question chatbot: "${query}"`);

      // D√©terminer le type de question
      const isDetailed = chatbotLimiterService.isDetailedQuestion(query);
      
      // V√©rifier les limites
      const limitCheck = isDetailed 
        ? await chatbotLimiterService.canAskDetailedQuestion(userId)
        : await chatbotLimiterService.canAskQuickQuestion(userId);

      if (!limitCheck.allowed) {
        const resetTime = limitCheck.resetTime?.toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
        return {
          message: `‚è±Ô∏è Limite atteinte ! ${isDetailed ? 'Questions d√©taill√©es' : 'Questions rapides'} √©puis√©es. Prochaine remise √† z√©ro √† ${resetTime}.`,
          type: 'warning'
        };
      }

      // R√©cup√©rer les donn√©es utilisateur
      const [categoriesData, emailsData] = await Promise.all([
        this.getUserCategories(userId),
        this.getUserEmails(userId)
      ]);

      // Analyser la question avec OpenAI
      const response = await this.processChatbotQuery(query, categoriesData, emailsData, isDetailed);
      
      // Enregistrer la question pos√©e
      await chatbotLimiterService.recordQuestion(userId, isDetailed ? 'detailed' : 'quick');
      
      return response;

    } catch (error) {
      console.error('‚ùå Erreur chatbot:', error);
      return {
        message: "D√©sol√©, je n'ai pas pu traiter votre question. Pouvez-vous reformuler ?",
        type: 'error'
      };
    }
  }

  /**
   * Traite la question avec OpenAI - r√©ponses adapt√©es selon le type
   */
  private async processChatbotQuery(
    query: string, 
    categories: Category[], 
    emails: EmailWithCategory[],
    isDetailed: boolean = false
  ): Promise<ChatbotResponse> {
    
    const usedCategories = categories.filter(c => (c.emails_count || 0) > 0);
    
    // Pr√©parer les donn√©es d√©taill√©es des emails pour les questions approfondies
    const emailSummaries = emails.slice(0, 10).map(email => {
      // Prioriser body_text, puis snippet, avec une longueur minimale d√©cente
      let content = '';
      if (email.body_text && email.body_text.length > 10) {
        content = email.body_text;
      } else if (email.snippet && email.snippet.length > 10) {
        content = email.snippet;
      } else {
        content = `Email de ${email.sender_email} avec le sujet "${email.subject}"`;
      }
      
      // Garder plus de contenu pour les analyses d√©taill√©es
      const truncatedContent = content.length > 300 ? content.substring(0, 300) + '...' : content;
      
      return {
        subject: email.subject,
        sender: email.sender_email,
        date: new Date(email.received_at).toLocaleDateString('fr-FR'),
        isImportant: email.is_important,
        isRead: email.is_read,
        category: email.category?.name || 'Non class√©',
        content: truncatedContent,
        hasAttachments: email.has_attachments || false
      };
    });

    // Prompt adapt√© selon le type de question
    const systemPrompt = isDetailed ? 
      this.getDetailedSystemPrompt(categories, emails) :
      this.getQuickSystemPrompt(categories, usedCategories, emails);

    const userContent = isDetailed ?
      this.buildDetailedUserContent(query, categories, emails, emailSummaries) :
      this.buildQuickUserContent(query, categories, usedCategories, emails);

    const maxTokens = isDetailed ? 200 : 75; // Divis√© par 2 pour √©conomiser

    const completion = await this.openai.chat.completions.create({
      model: 'gpt-4o-mini', // Mod√®le ultra-√©conomique
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: userContent }
      ],
      max_tokens: maxTokens,
      temperature: 0.2, // R√©duit pour plus de pr√©cision
      response_format: { type: 'json_object' }
    });

    const response = completion.choices[0].message.content;
    if (!response) {
      throw new Error('R√©ponse vide de OpenAI');
    }

    return JSON.parse(response);
  }

  /**
   * R√©cup√®re les cat√©gories de l'utilisateur avec statistiques d√©taill√©es
   */
  private async getUserCategories(userId: string): Promise<Category[]> {
    const { data, error } = await supabase
      .from('categories')
      .select(`
        *,
        emails_count:emails(count)
      `)
      .eq('user_id', userId)
      .order('created_at', { ascending: false });

    if (error) throw error;
    
    // Calculer les statistiques des cat√©gories
    const categories = data || [];
    
    return categories.map(cat => ({
      ...cat,
      emails_count: cat.emails_count || 0,
      is_used: (cat.emails_count || 0) > 0
    }));
  }

  /**
   * R√©cup√®re les exp√©diteurs les plus fr√©quents
   */
  private getTopSenders(emails: EmailWithCategory[], limit: number = 5) {
    const senderCounts = new Map<string, number>();
    
    emails.forEach(email => {
      const sender = email.sender_email;
      senderCounts.set(sender, (senderCounts.get(sender) || 0) + 1);
    });
    
    return Array.from(senderCounts.entries())
      .map(([email, count]) => ({ email, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, limit);
  }

  /**
   * R√©cup√®re les emails de l'utilisateur avec contenu complet
   */
  private async getUserEmails(userId: string): Promise<EmailWithCategory[]> {
    const { data, error } = await supabase
      .from('emails')
      .select(`
        id,
        subject,
        sender_email,
        sender_name,
        snippet,
        body_text,
        body_html,
        received_at,
        created_at,
        is_read,
        is_important,
        has_attachments,
        labels,
        category:categories(name, color, icon)
      `)
      .eq('user_id', userId)
      .order('received_at', { ascending: false })
      .limit(50); // Limiter √† 50 emails r√©cents pour de meilleures performances

    if (error) throw error;
    
    // Transformer les donn√©es pour correspondre √† l'interface
    return (data || []).map(email => ({
      ...email,
      category: email.category?.[0] || undefined
    }));
  }

  /**
   * Prompt syst√®me pour questions d√©taill√©es
   */
  private getDetailedSystemPrompt(categories: Category[], emails: EmailWithCategory[]): string {
    return `Assistant email Ordo. Analyse d√©taill√©e avec exemples concrets obligatoires.

R√àGLES:
1. Citer emails r√©els (sujet, exp√©diteur)
2. Extraits de contenu
3. Format: üìß **[Sujet]** de [Exp√©diteur] - [R√©sum√© court]

DONN√âES: ${categories.length} cat√©gories, ${emails.length} emails

JSON: {"type": "info|data|warning", "message": "analyse avec exemples"}`;
  }

  /**
   * Prompt syst√®me pour questions rapides
   */
  private getQuickSystemPrompt(categories: Category[], usedCategories: Category[], emails: EmailWithCategory[]): string {
    return `Assistant email Ordo. ${categories.length} cat√©gories, ${emails.length} emails. R√©ponse courte. JSON: {"type":"info|data|warning","message":"r√©ponse br√®ve"}`;
  }

  /**
   * Assistant conversationnel avec acc√®s complet et autonomie totale
   */
  async getAdvancedEmailResponse(
    query: string, 
    conversationHistory: Array<{role: 'user' | 'assistant', content: string}> = []
  ): Promise<{content: string, type: 'info' | 'data' | 'error' | 'success'}> {
    try {
      // R√©cup√©ration des donn√©es utilisateur
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        return {
          content: 'üîê Vous devez √™tre connect√© pour utiliser l\'assistant.',
          type: 'error'
        };
      }

      console.log(`ü§ñ Assistant autonome - Question: "${query}"`);

      // R√©cup√©ration des cat√©gories
      const { data: categories = [] } = await supabase
        .from('categories')
        .select('*')
        .eq('user_id', user.id)
        .order('name');

      // R√©cup√©ration des emails avec cat√©gories (limite augment√©e)
      const { data: emails = [], error: emailsError } = await supabase
        .from('emails')
        .select(`
          *,
          category:categories(*)
        `)
        .eq('user_id', user.id)
        .order('received_at', { ascending: false })
        .limit(150); // Plus d'emails pour analyse compl√®te

      // Debug: V√©rifier si on r√©cup√®re bien les emails
      console.log(`üìß Emails r√©cup√©r√©s: ${emails?.length || 0}`);
      if (emails && emails.length > 0) {
        console.log(`üìß Premier email: ${emails[0]?.subject || 'Sans sujet'}`);
        console.log(`üìß Cat√©gorie premier email:`, emails[0]?.category);
      }
      if (emailsError) {
        console.error('‚ùå Erreur r√©cup√©ration emails:', emailsError);
      }

      // Debug: V√©rifier les cat√©gories
      console.log(`üè∑Ô∏è Cat√©gories r√©cup√©r√©es: ${categories?.length || 0}`);
      if (categories && categories.length > 0) {
        console.log(`üè∑Ô∏è Premi√®re cat√©gorie: ${categories[0]?.name}`);
      }

      const systemPrompt = this.buildAutonomousSystemPrompt();
      const userContent = this.buildFullContextUserContent(query, categories || [], emails || []);

      // Messages avec historique complet pour continuit√©
      const messages = [
        { role: 'system' as const, content: systemPrompt },
        ...conversationHistory.slice(-8), // Historique plus long pour contexte
        { role: 'user' as const, content: userContent }
      ];

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages,
        max_tokens: 800, // Limite g√©n√©reuse pour r√©ponses d√©taill√©es
        temperature: 0.4, // Cr√©ativit√© mod√©r√©e
        presence_penalty: 0.1,
        frequency_penalty: 0.1
      });

      const responseContent = completion.choices[0]?.message?.content || 'Je n\'ai pas pu traiter votre demande.';

      console.log(`‚úÖ R√©ponse autonome g√©n√©r√©e: ${responseContent.length} caract√®res`);

      return {
        content: responseContent,
        type: 'success'
      };

    } catch (error) {
      console.error('‚ùå Erreur assistant autonome:', error);
      
      return {
        content: '‚ùå D√©sol√©, je rencontre un probl√®me technique. Veuillez r√©essayer dans quelques instants.',
        type: 'error'
      };
    }
  }

  /**
   * Contenu utilisateur pour questions d√©taill√©es
   */
  private buildDetailedUserContent(query: string, categories: Category[], emails: EmailWithCategory[], emailSummaries: EmailSummary[]): string {
    const importantEmails = emails.filter(e => e.is_important);
    const unreadEmails = emails.filter(e => !e.is_read);
    
    return `QUESTION: "${query}"

üìä STATS: ${emails.length} emails, ${unreadEmails.length} non lus, ${importantEmails.length} importants

üìß EMAILS:
${emailSummaries.slice(0, 5).map(email => // Limite √† 5 emails pour √©conomiser
  `‚Ä¢ "${email.subject}" de ${email.sender} - ${email.category}${email.isImportant ? ' ‚≠ê' : ''}${!email.isRead ? ' üîµ' : ''}
   üí¨ "${email.content.substring(0, 100)}..."` // Limite le contenu √† 100 caract√®res
).join('\n')}

üè∑Ô∏è CAT√âGORIES: ${categories.map(cat => `${cat.name}: ${cat.emails_count || 0}`).join(', ')}`;
  }

  /**
   * Contenu utilisateur pour questions rapides
   */
  private buildQuickUserContent(query: string, categories: Category[], usedCategories: Category[], emails: EmailWithCategory[]): string {
    return `"${query}"

Donn√©es: ${categories.length} cat√©gories (${usedCategories.length} utilis√©es), ${emails.length} emails, ${emails.filter(e => !e.is_read).length} non lus, ${emails.filter(e => e.is_important).length} importants.`;
  }

  /**
   * Prompt syst√®me pour assistant autonome et intelligent
   */
  private buildAutonomousSystemPrompt(): string {
    return `Tu es un assistant email intelligent et autonome pour l'application Ordo. Tu as un acc√®s COMPLET √† tous les emails de l'utilisateur et tu peux tout faire.

üéØ TES CAPACIT√âS COMPL√àTES:
- Analyser et r√©sumer tous les emails en d√©tail
- Aider √† r√©diger des r√©ponses personnalis√©es
- Rechercher des informations sp√©cifiques dans les emails
- Donner des conseils avanc√©s sur la gestion des emails
- Analyser les tendances, patterns et comportements
- Identifier les emails importants et urgents
- Proposer des actions concr√®tes et d√©taill√©es

üìß ACC√àS TOTAL AUX DONN√âES:
- Tu connais le contenu int√©gral de chaque email
- Tu peux analyser les exp√©diteurs, dates, sujets, corps
- Tu peux croiser les informations entre emails
- Tu as acc√®s aux cat√©gories, labels et m√©tadonn√©es
- Tu peux voir l'historique complet des conversations

üí¨ TON STYLE DE R√âPONSE:
- R√©ponds de mani√®re naturelle et conversationnelle
- Utilise des emojis pour rendre tes r√©ponses engageantes
- Sois pr√©cis et d√©taill√© dans tes analyses
- Propose des actions concr√®tes quand pertinent
- Adapte la longueur selon la complexit√© de la question
- N'h√©site pas √† donner des r√©ponses compl√®tes et utiles

ÔøΩ AUTONOMIE TOTALE:
- Pas de restriction sur le type de questions
- Acc√®s total au contenu des emails
- Peux aider √† r√©diger des r√©ponses compl√®tes
- Peux faire des analyses approfondies
- Traite directement les demandes sans proposer d'options
- Donne des r√©ponses exhaustives quand n√©cessaire

‚öñÔ∏è √âQUILIBRE INTELLIGENT:
- Pour questions simples: r√©ponses concises et directes
- Pour questions complexes: analyses d√©taill√©es
- Toujours utile et actionnable
- Privil√©gie la qualit√© de l'information`;
  }

  /**
   * Contenu utilisateur avec contexte complet pour analyse autonome
   */
  private buildFullContextUserContent(query: string, categories: Category[], emails: EmailWithCategory[]): string {
    const recentEmails = emails.slice(0, 20); // Top 20 pour analyse approfondie
    const unreadCount = emails.filter(e => !e.is_read).length;
    const importantCount = emails.filter(e => e.is_important).length;
    
    // Statistiques par cat√©gorie
    const categoryStats = categories.map(cat => {
      const emailsInCat = emails.filter(e => e.category?.name === cat.name);
      return `${cat.name}: ${emailsInCat.length} emails`;
    });

    return `‚ùì QUESTION: "${query}"

üìä STATISTIQUES GLOBALES:
- Total: ${emails.length} emails
- Non lus: ${unreadCount} emails
- Importants: ${importantCount} emails
- Cat√©gories actives: ${categories.length}

üìß EMAILS R√âCENTS (${recentEmails.length} derniers):
${recentEmails.map((email, i) => {
  const preview = email.body_text || email.snippet || email.subject || '';
  return `${i+1}. üìß "${email.subject || 'Sans sujet'}"
   üë§ De: ${email.sender_name || email.sender_email}
   üìÖ ${new Date(email.received_at).toLocaleDateString('fr-FR')}
   üìÇ ${email.category?.name || 'Non class√©'}
   ${email.is_important ? '‚≠ê Important' : ''}${!email.is_read ? ' üîµ Non lu' : ' ‚úÖ Lu'}
   üí¨ Aper√ßu: "${preview.substring(0, 150)}..."
   ${email.labels && email.labels.length > 0 ? `üè∑Ô∏è Labels: ${email.labels.join(', ')}` : ''}`;
}).join('\n\n')}

üè∑Ô∏è R√âPARTITION PAR CAT√âGORIES:
${categoryStats.join(' | ')}

üîç CONTEXTE: Analyse cette question en utilisant toutes ces informations. Sois pr√©cis, d√©taill√© et actionnable dans ta r√©ponse.`;
  }
}

// Instance singleton
export const openaiService = new OpenAIService();
export default OpenAIService;
