-- SCRIPT DE R√âPARAT  -- Ensuite cr√©er les cat√©gories par d√©faut (8 cat√©gories avec ic√¥nes corrig√©es)
  INSERT INTO public.categories (user_id, name, color, icon, is_default, is_auto_generated)
  VALUES
    (NEW.id, 'Banque', '#10b981', 'üè¶', true, false),
    (NEW.id, 'Personnel', '#8b5cf6', 'üë§', true, false),
    (NEW.id, 'Travail', '#f59e0b', 'üíº', true, false),
    (NEW.id, 'Factures', '#ef4444', 'üìÑ', true, false),
    (NEW.id, 'Billets', '#06b6d4', 'üé´', true, false),
    (NEW.id, 'Promotions', '#f97316', 'üè∑Ô∏è', true, false),
    (NEW.id, 'R√©seaux sociaux', '#8b5cf6', 'üì±', true, false),
    (NEW.id, 'Publicit√©', '#f43f5e', 'üì¢', true, false);THENTIFICATION ORDO
-- √Ä ex√©cuter dans l'√©diteur SQL de Supabase

-- 1. Supprimer le trigger d√©faillant
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- 2. Supprimer l'ancienne fonction
DROP FUNCTION IF EXISTS public.handle_new_user();

-- 3. Ajouter la colonne is_auto_generated si elle n'existe pas
ALTER TABLE public.categories ADD COLUMN IF NOT EXISTS is_auto_generated BOOLEAN DEFAULT FALSE;

-- 4. Cr√©er une nouvelle fonction trigger corrig√©e
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  -- D'abord cr√©er le profil utilisateur
  INSERT INTO public.profiles (id, email, full_name)
  VALUES (NEW.id, NEW.email, NEW.raw_user_meta_data->>'full_name');
  
  -- Ensuite cr√©er les cat√©gories par d√©faut (8 cat√©gories de base UNIQUEMENT)
  INSERT INTO public.categories (user_id, name, color, icon, is_default, is_auto_generated)
  VALUES
    (NEW.id, 'Banque', '#10b981', 'üè¶', true, false),
    (NEW.id, 'Personnel', '#8b5cf6', 'ÔøΩ', true, false),
    (NEW.id, 'Travail', '#f59e0b', 'ÔøΩ', true, false),
    (NEW.id, 'Factures', '#ef4444', 'üìÑ', true, false),
    (NEW.id, 'Billets', '#06b6d4', 'ÔøΩ', true, false),
    (NEW.id, 'Promotions', '#f97316', 'üè∑Ô∏è', true, false),
    (NEW.id, 'R√©seaux sociaux', '#8b5cf6', 'ÔøΩ', true, false),
    (NEW.id, 'Publicit√©', '#f43f5e', 'üì¢', true, false);
    
  RETURN NEW;
EXCEPTION
  WHEN OTHERS THEN
    -- En cas d'erreur, on log mais on ne fait pas √©chouer l'inscription
    RAISE LOG 'Erreur lors de la cr√©ation des cat√©gories par d√©faut pour l''utilisateur %: %', NEW.id, SQLERRM;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 5. Recr√©er le trigger
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- 6. Nettoyer les donn√©es corrompues potentielles
-- (Optionnel - supprimer les utilisateurs qui n'ont pas de profil)
DELETE FROM auth.users 
WHERE id NOT IN (SELECT id FROM public.profiles);

-- Message de confirmation
DO $$
BEGIN
  RAISE NOTICE 'Script de r√©paration de l''authentification ex√©cut√© avec succ√®s !';
  RAISE NOTICE 'Les nouveaux utilisateurs auront maintenant automatiquement leurs cat√©gories par d√©faut.';
END $$;
